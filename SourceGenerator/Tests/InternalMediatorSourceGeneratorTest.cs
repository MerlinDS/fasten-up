using System.Collections.Generic;
using System.Reflection;
using FluentAssertions;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using NUnit.Framework;

namespace FastenUp.SourceGenerator.Tests
{
    [TestFixture]
    [TestOf(typeof(InternalMediatorSourceGenerator))]
    public class InternalMediatorSourceGeneratorTest
    {
        private const string Source = @"
using System;

namespace FastenUp.Runtime.Binders
{
    public interface IBinder{}
    public interface IBinder<in T> : IBinder{}
    public interface IEventBinder<out T> : IBinder{}

    public class BaseBinder : IBinder{}
}
namespace FastenUp.Runtime.Bindables
{
    public interface IInternalBindable{}
    public interface IInternalBindable<out T> : IInternalBindable{}
    public interface IInternalBindableEvent<out T> : IInternalBindable{}

    public sealed class Bindable<T> : IBindable<T>, IInternalBindable<T>{}

    public interface IBindableEvent<in T> : IDisposable{}
    public abstract class BaseBindableEvent<T> : IBindableEvent<T>, IInternalBindableEvent<T>{}
    public sealed class BindableEvent : BaseBindableEvent<UnityAction>{}
    public sealed class BindableEvent<T> : BaseBindableEvent<UnityAction<T>>{}
}

namespace FastenUp.Runtime.Mediators
{
    public interface IMediator{}
    public interface IInternalMediator{}
}

namespace FastenUp.Runtime.Utils
{
    public static class BindUtilities
    {
        public static void TryBind<T>(IInternalBindable<T> bindable, IBinder binder){}
        public static void TryUnbind<T>(IInternalBindable<T> bindable, IBinder binder){}
        public static void TryBind<T>(IInternalBindableEvent<T> bindableEvent, IBinder eventBinder){}
        public static void TryUnbind<T>(IInternalBindableEvent<T> bindableEvent, IBinder eventBinder){}
    }
}
";

        private const string Disclaimer = @"// --- GENERATED BY FASTEN UP SOURCE GENERATOR ---";

        private static IEnumerable<TestCaseData> SuccessGenerationTestCases
        {
            get
            {
                yield return new TestCaseData(@"
namespace Test
{
    public partial class TestMediator : FastenUp.Runtime.Mediators.IMediator
    {
    }
}",
                        @"
namespace Test
{
    public partial class TestMediator : FastenUp.Runtime.Mediators.IInternalMediator
    {
        public void Bind(FastenUp.Runtime.Binders.IBinder binder)
        {
        }
        public void Unbind(FastenUp.Runtime.Binders.IBinder binder)
        {
        }
    }
}
")
                    .SetName("One mediator without properties");
                yield return new TestCaseData(@"
namespace Test
{
    public partial class TestMediator : FastenUp.Runtime.Mediators.IMediator
    {
        private FastenUp.Runtime.Bindables.Bindable<bool> Visibility { get; } = new();
    }
}",
                        @"
namespace Test
{
    public partial class TestMediator : FastenUp.Runtime.Mediators.IInternalMediator
    {
        public void Bind(FastenUp.Runtime.Binders.IBinder binder)
        {
            if (FastenUp.Runtime.Utils.BindUtilities.NameEquals(nameof(Visibility), binder))
                FastenUp.Runtime.Utils.BindUtilities.TryBind(Visibility, binder);
        }
        public void Unbind(FastenUp.Runtime.Binders.IBinder binder)
        {
            if (FastenUp.Runtime.Utils.BindUtilities.NameEquals(nameof(Visibility), binder))
                FastenUp.Runtime.Utils.BindUtilities.TryUnbind(Visibility, binder);
        }
    }
}
")
                    .SetName("One mediator with one property");
                yield return new TestCaseData(@"
namespace Test
{
    public partial class TestMediator : FastenUp.Runtime.Mediators.IMediator
    {
        private FastenUp.Runtime.Bindables.Bindable<bool> Visibility { get; } = new();
        private FastenUp.Runtime.Bindables.Bindable<int> IntValue { get; } = new();
    }
}",
                        @"
namespace Test
{
    public partial class TestMediator : FastenUp.Runtime.Mediators.IInternalMediator
    {
        public void Bind(FastenUp.Runtime.Binders.IBinder binder)
        {
            if (FastenUp.Runtime.Utils.BindUtilities.NameEquals(nameof(Visibility), binder))
                FastenUp.Runtime.Utils.BindUtilities.TryBind(Visibility, binder);
            if (FastenUp.Runtime.Utils.BindUtilities.NameEquals(nameof(IntValue), binder))
                FastenUp.Runtime.Utils.BindUtilities.TryBind(IntValue, binder);
        }
        public void Unbind(FastenUp.Runtime.Binders.IBinder binder)
        {
            if (FastenUp.Runtime.Utils.BindUtilities.NameEquals(nameof(Visibility), binder))
                FastenUp.Runtime.Utils.BindUtilities.TryUnbind(Visibility, binder);
            if (FastenUp.Runtime.Utils.BindUtilities.NameEquals(nameof(IntValue), binder))
                FastenUp.Runtime.Utils.BindUtilities.TryUnbind(IntValue, binder);
        }
    }
}
")
                    .SetName("One mediator with two properties");
                yield return new TestCaseData(@"
namespace Test
{
    public partial class TestMediator : FastenUp.Runtime.Mediators.IMediator
    {
        private FastenUp.Runtime.Bindables.Bindable<bool> Visibility { get; } = new();
        private FastenUp.Runtime.Bindables.BindableEvent<int> OnValueChanged { get; } = new();
    }
}",
                        @"
namespace Test
{
    public partial class TestMediator : FastenUp.Runtime.Mediators.IInternalMediator
    {
        public void Bind(FastenUp.Runtime.Binders.IBinder binder)
        {
            if (FastenUp.Runtime.Utils.BindUtilities.NameEquals(nameof(Visibility), binder))
                FastenUp.Runtime.Utils.BindUtilities.TryBind(Visibility, binder);
            if (FastenUp.Runtime.Utils.BindUtilities.NameEquals(nameof(OnValueChanged), binder))
                FastenUp.Runtime.Utils.BindUtilities.TryBind(OnValueChanged, binder);
        }
        public void Unbind(FastenUp.Runtime.Binders.IBinder binder)
        {
            if (FastenUp.Runtime.Utils.BindUtilities.NameEquals(nameof(Visibility), binder))
                FastenUp.Runtime.Utils.BindUtilities.TryUnbind(Visibility, binder);
            if (FastenUp.Runtime.Utils.BindUtilities.NameEquals(nameof(OnValueChanged), binder))
                FastenUp.Runtime.Utils.BindUtilities.TryUnbind(OnValueChanged, binder);
        }
    }
}
")
                    .SetName("One mediator with one property and one event");
            }
        }

        [TestCaseSource(nameof(SuccessGenerationTestCases))]
        public void Generate(string source, string expected)
        {
            //Arrange
            expected = (Disclaimer + expected).TrimEnd('\r', '\n');
            var expectedCount = string.IsNullOrEmpty(expected) ? 0 : 1;
            var inputCompilation = CreateCompilation(Source + source);
            var sut = CSharpGeneratorDriver.Create(new InternalMediatorSourceGenerator());
            //Act
            var generators = sut.RunGenerators(inputCompilation);
            var actual = generators.GetRunResult();
            //Assert
            actual.GeneratedTrees.Should().HaveCount(expectedCount, "because we have one mediator declaration");
            if (expectedCount > 0)
                actual.GeneratedTrees[0].GetRoot().ToFullString().TrimEnd('\r', '\n').Should().Be(expected);
        }

        private static IEnumerable<TestCaseData> FailedGenerationTestCases
        {
            get
            {
                yield return new TestCaseData(@"
using System;

namespace FastenUp.Runtime.Binders
{
    public interface IBinder{}
    public interface IBinder<in T> : IBinder{}
    public interface IEventBinder<out T> : IBinder{}

    public class BaseBinder : IBinder{}
}
namespace FastenUp.Runtime.Bindables
{

}

namespace FastenUp.Runtime.Mediators
{
    public interface IMediator{}
    public interface IInternalMediator{}
}
").SetName("Without IInternalBindable");
                
                yield return new TestCaseData(@"
using System;

namespace FastenUp.Runtime.Binders
{
    public interface IBinder{}
    public interface IBinder<in T> : IBinder{}
    public interface IEventBinder<out T> : IBinder{}

    public class BaseBinder : IBinder{}
}
namespace FastenUp.Runtime.Bindables
{
    public interface IInternalBindable{}
    public interface IInternalBindable<out T> : IInternalBindable{}

    public sealed class Bindable<T> : IBindable<T>, IInternalBindable<T>{}
    public sealed class BindableEvent : BaseBindableEvent<UnityAction>{}
}

namespace FastenUp.Runtime.Mediators
{
    public interface IInternalMediator{}
}

namespace FastenUp.Runtime.Utils
{
    public static class BindUtilities
    {
        public static void TryBind<T>(IInternalBindable<T> bindable, IBinder binder){}
        public static void TryUnbind<T>(IInternalBindable<T> bindable, IBinder binder){}
        public static void TryBind<T>(IInternalBindableEvent<T> bindableEvent, IBinder eventBinder){}
        public static void TryUnbind<T>(IInternalBindableEvent<T> bindableEvent, IBinder eventBinder){}
    }
}
").SetName("Without Mediator");
                yield return new TestCaseData(@"
using System;

namespace FastenUp.Runtime.Binders
{
    public interface IBinder{}
    public interface IBinder<in T> : IBinder{}
    public interface IEventBinder<out T> : IBinder{}

    public class BaseBinder : IBinder{}
}
namespace FastenUp.Runtime.Bindables
{
    public interface IInternalBindable{}
    public interface IInternalBindable<out T> : IInternalBindable{}

    public sealed class Bindable<T> : IBindable<T>, IInternalBindable<T>{}
    public sealed class BindableEvent : BaseBindableEvent<UnityAction>{}
}

namespace FastenUp.Runtime.Mediators
{
    public interface IMediator{}
}

namespace FastenUp.Runtime.Utils
{
    public static class BindUtilities
    {
        public static void TryBind<T>(IInternalBindable<T> bindable, IBinder binder){}
        public static void TryUnbind<T>(IInternalBindable<T> bindable, IBinder binder){}
        public static void TryBind<T>(IInternalBindableEvent<T> bindableEvent, IBinder eventBinder){}
        public static void TryUnbind<T>(IInternalBindableEvent<T> bindableEvent, IBinder eventBinder){}
    }
}
").SetName("Without Internal mediator");
            }
        }

        [TestCaseSource(nameof(FailedGenerationTestCases))]
        public void Generate_When_compilation_has_no_symbol_should_not_generate(string source)
        {
            //Arrange
            var inputCompilation = CreateCompilation(source);
            var sut = CSharpGeneratorDriver.Create(new InternalMediatorSourceGenerator());
            //Act
            var generators = sut.RunGenerators(inputCompilation);
            var actual = generators.GetRunResult();
            //Assert
            actual.GeneratedTrees.Should().BeEmpty();
        }

        private static Compilation CreateCompilation(string source)
            => CSharpCompilation.Create("compilation",
                new[] { CSharpSyntaxTree.ParseText(source) },
                new[] { MetadataReference.CreateFromFile(typeof(Binder).GetTypeInfo().Assembly.Location) },
                new CSharpCompilationOptions(OutputKind.ConsoleApplication));
    }
}