using System.Collections.Generic;
using System.Reflection;
using FluentAssertions;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using NUnit.Framework;

namespace FastenUp.SourceGenerator.Tests
{
    [TestFixture]
    [TestOf(typeof(InternalMediatorSourceGenerator))]
    public class InternalMediatorSourceGeneratorTest
    {
        private const string Source = @"
using System;

namespace FastenUp.Runtime.Utils
{
    public static class BindUtilities
    {
        internal static void TryBind<T>(IInternalBindPoint<T> bindPoint,
            ReadOnlySpan<char> name, IBindable bindable){}
        internal static void TryUnbind<T>(IInternalBindPoint<T> bindPoint,
            ReadOnlySpan<char> name, IBindable bindable){}
        internal static void TryBind<T>(IInternalBindAction<T> bindPoint,
            ReadOnlySpan<char> name, IBindable bindable){}
        internal static void TryUnbind<T>(IInternalBindAction<T> bindAction,
            ReadOnlySpan<char> name, IBindable bindable){}
    }
}
namespace FastenUp.Runtime.Bindables
{
    public interface IBindable{
    }
}

namespace FastenUp.Runtime.Base
{
    public interface IMediator{}
    public interface IInternalBind{}
    public interface IInternalBindPoint<out T> : IInternalBind
    {
    }
    public interface IInternalBindAction<out T> : IInternalBind
    {
    }
    public interface IBindPoint<T>{}
    public class BindPoint<T> : IBindPoint<T>, IInternalBindPoint<T>{}
    public class BindAction<T> : IInternalBindAction<T>{}

    public interface IInternalMediator
    {
        void Bind(FastenUp.Runtime.Bindables.IBindable bindable);
        void Unbind(FastenUp.Runtime.Bindables.IBindable bindable);
    }
}
";

        private const string Disclaimer = @"// --- GENERATED BY FASTEN UP SOURCE GENERATOR ---";

        private static IEnumerable<TestCaseData> SuccessGenerationTestCases
        {
            get
            {
                yield return new TestCaseData(@"
namespace Test
{
    public partial class TestMediator : FastenUp.Runtime.Base.IMediator
    {
    }
}",
                        @"
namespace Test
{
    public partial class TestMediator : FastenUp.Runtime.Base.IInternalMediator
    {
        public void Bind(FastenUp.Runtime.Bindables.IBindable bindable)
        {
        }
        public void Unbind(FastenUp.Runtime.Bindables.IBindable bindable)
        {
        }
    }
}
")
                    .SetName("One mediator without proxies");
                yield return new TestCaseData(@"
namespace Test
{
    public partial class TestMediator : FastenUp.Runtime.Base.IMediator
    {
        private FastenUp.Runtime.Base.BindPoint<bool> Visibility { get; } = new();
    }
}",
                        @"
namespace Test
{
    public partial class TestMediator : FastenUp.Runtime.Base.IInternalMediator
    {
        public void Bind(FastenUp.Runtime.Bindables.IBindable bindable)
        {
            FastenUp.Runtime.Utils.BindUtilities.TryBind(Visibility, nameof(Visibility), bindable);
        }
        public void Unbind(FastenUp.Runtime.Bindables.IBindable bindable)
        {
            FastenUp.Runtime.Utils.BindUtilities.TryUnbind(Visibility, nameof(Visibility), bindable);
        }
    }
}
")
                    .SetName("One mediator with one proxy field");
                yield return new TestCaseData(@"
namespace Test
{
    public partial class TestMediator : FastenUp.Runtime.Base.IMediator
    {
        private FastenUp.Runtime.Base.BindPoint<bool> Visibility { get; } = new();
        private FastenUp.Runtime.Base.BindPoint<int> IntValue { get; } = new();
    }
}",
                        @"
namespace Test
{
    public partial class TestMediator : FastenUp.Runtime.Base.IInternalMediator
    {
        public void Bind(FastenUp.Runtime.Bindables.IBindable bindable)
        {
            FastenUp.Runtime.Utils.BindUtilities.TryBind(Visibility, nameof(Visibility), bindable);
            FastenUp.Runtime.Utils.BindUtilities.TryBind(IntValue, nameof(IntValue), bindable);
        }
        public void Unbind(FastenUp.Runtime.Bindables.IBindable bindable)
        {
            FastenUp.Runtime.Utils.BindUtilities.TryUnbind(Visibility, nameof(Visibility), bindable);
            FastenUp.Runtime.Utils.BindUtilities.TryUnbind(IntValue, nameof(IntValue), bindable);
        }
    }
}
")
                    .SetName("One mediator with two proxy fields");
                yield return new TestCaseData(@"
namespace Test
{
    public partial class TestMediator : FastenUp.Runtime.Base.IMediator
    {
        private FastenUp.Runtime.Base.BindPoint<bool> Visibility { get; } = new();
        private FastenUp.Runtime.Base.BindAction<int> IntAction { get; } = new();
    }
}",
                        @"
namespace Test
{
    public partial class TestMediator : FastenUp.Runtime.Base.IInternalMediator
    {
        public void Bind(FastenUp.Runtime.Bindables.IBindable bindable)
        {
            FastenUp.Runtime.Utils.BindUtilities.TryBind(Visibility, nameof(Visibility), bindable);
            FastenUp.Runtime.Utils.BindUtilities.TryBind(IntAction, nameof(IntAction), bindable);
        }
        public void Unbind(FastenUp.Runtime.Bindables.IBindable bindable)
        {
            FastenUp.Runtime.Utils.BindUtilities.TryUnbind(Visibility, nameof(Visibility), bindable);
            FastenUp.Runtime.Utils.BindUtilities.TryUnbind(IntAction, nameof(IntAction), bindable);
        }
    }
}
")
                    .SetName("One mediator with action and property");
            }
        }

        [TestCaseSource(nameof(SuccessGenerationTestCases))]
        public void Generate(string source, string expected)
        {
            //Arrange
            expected = (Disclaimer + expected).TrimEnd('\r', '\n');
            var expectedCount = string.IsNullOrEmpty(expected) ? 0 : 1;
            var inputCompilation = CreateCompilation(Source + source);
            var sut = CSharpGeneratorDriver.Create(new InternalMediatorSourceGenerator());
            //Act
            var generators = sut.RunGenerators(inputCompilation);
            var actual = generators.GetRunResult();
            //Assert
            actual.GeneratedTrees.Should().HaveCount(expectedCount, "because we have one mediator declaration");
            if (expectedCount > 0)
                actual.GeneratedTrees[0].GetRoot().ToFullString().TrimEnd('\r', '\n').Should().Be(expected);
        }

        private static IEnumerable<TestCaseData> FailedGenerationTestCases
        {
            get
            {
                yield return new TestCaseData(@"
using System;

namespace FastenUp.Runtime.Utils
{
    public static class BindUtilities
    {
        internal static void TryBind<T>(IInternalBindPoint<T> bindPoint,
            ReadOnlySpan<char> name, IBindable bindable){}
        internal static void TryUnbind<T>(IInternalBindPoint<T> bindPoint,
            ReadOnlySpan<char> name, IBindable bindable){}
    }
}
namespace FastenUp.Runtime.Bindables
{
    public interface IBindable{
    }
}

namespace FastenUp.Runtime.Base
{
    public interface IMediator{}
    public interface IBindPoint<T>{}
    public class BindPoint<T> : IBindPoint<T>

    public interface IInternalMediator
    {
        void Bind(FastenUp.Runtime.Bindables.IBindable bindable);
        void Unbind(FastenUp.Runtime.Bindables.IBindable bindable);
    }
}
").SetName("Without IInternalBindPoint");
                
                yield return new TestCaseData(@"
using System;

namespace FastenUp.Runtime.Utils
{
    public static class BindUtilities
    {
        internal static void TryBind<T>(IInternalBindPoint<T> bindPoint,
            ReadOnlySpan<char> name, IBindable bindable){}
        internal static void TryUnbind<T>(IInternalBindPoint<T> bindPoint,
            ReadOnlySpan<char> name, IBindable bindable){}
    }
}
namespace FastenUp.Runtime.Bindables
{
    public interface IBindable{
    }
}

namespace FastenUp.Runtime.Base
{
    internal interface IInternalBindPoint<out T>{}
    public interface IBindPoint<T>{}
    public class BindPoint<T> : IBindPoint<T>, IInternalBindPoint<T>{}

    public interface IInternalMediator
    {
        void Bind(FastenUp.Runtime.Bindables.IBindable bindable);
        void Unbind(FastenUp.Runtime.Bindables.IBindable bindable);
    }
}
").SetName("Without Mediator");
                yield return new TestCaseData(@"
using System;

namespace FastenUp.Runtime.Utils
{
    public static class BindUtilities
    {
        internal static void TryBind<T>(IInternalBindPoint<T> bindPoint,
            ReadOnlySpan<char> name, IBindable bindable){}
        internal static void TryUnbind<T>(IInternalBindPoint<T> bindPoint,
            ReadOnlySpan<char> name, IBindable bindable){}
    }
}
namespace FastenUp.Runtime.Bindables
{
    public interface IBindable{
    }
}

namespace FastenUp.Runtime.Base
{
    public interface IMediator{}
    internal interface IInternalBindPoint<out T>{}
    public interface IBindPoint<T>{}
    public class BindPoint<T> : IBindPoint<T>, IInternalBindPoint<T>{}
}
").SetName("Without Internal mediator");
            }
        }

        [TestCaseSource(nameof(FailedGenerationTestCases))]
        public void Generate_When_compilation_has_no_symbol_should_not_generate(string source)
        {
            //Arrange
            var inputCompilation = CreateCompilation(source);
            var sut = CSharpGeneratorDriver.Create(new InternalMediatorSourceGenerator());
            //Act
            var generators = sut.RunGenerators(inputCompilation);
            var actual = generators.GetRunResult();
            //Assert
            actual.GeneratedTrees.Should().BeEmpty();
        }

        private static Compilation CreateCompilation(string source)
            => CSharpCompilation.Create("compilation",
                new[] { CSharpSyntaxTree.ParseText(source) },
                new[] { MetadataReference.CreateFromFile(typeof(Binder).GetTypeInfo().Assembly.Location) },
                new CSharpCompilationOptions(OutputKind.ConsoleApplication));
    }
}